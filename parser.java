
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package codigo;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\060\000\002\002\004\000\002\002\010\000\002\003" +
    "\004\000\002\034\004\000\002\034\002\000\002\004\005" +
    "\000\002\005\003\000\002\005\004\000\002\006\005\000" +
    "\002\007\004\000\002\007\005\000\002\010\003\000\002" +
    "\010\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\012\013\000\002\013\012\000\002\014\003\000" +
    "\002\014\004\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\016\005" +
    "\000\002\017\007\000\002\017\013\000\002\020\003\000" +
    "\002\020\005\000\002\021\005\000\002\022\003\000\002" +
    "\022\003\000\002\023\007\000\002\024\004\000\002\024" +
    "\005\000\002\025\013\000\002\026\006\000\002\027\013" +
    "\000\002\030\020\000\002\031\014\000\002\032\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\202\000\004\021\004\001\002\000\004\105\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\005\010\001\002\000\004\061\012\001\002\000" +
    "\004\012\023\001\002\000\004\105\017\001\002\000\006" +
    "\012\ufffd\061\012\001\002\000\004\012\uffff\001\002\000" +
    "\006\012\ufffd\061\012\001\002\000\004\012\ufffe\001\002" +
    "\000\004\005\020\001\002\000\006\012\ufffc\061\ufffc\001" +
    "\002\000\004\022\204\001\002\000\006\012\023\022\ufffb" +
    "\001\002\000\004\024\024\001\002\000\016\037\035\040" +
    "\034\042\042\043\040\044\041\045\037\001\002\000\004" +
    "\005\ufff5\001\002\000\004\005\ufff6\001\002\000\004\005" +
    "\032\001\002\000\004\013\031\001\002\000\006\012\ufff9" +
    "\022\ufff9\001\002\000\006\013\ufff8\024\024\001\002\000" +
    "\004\013\ufff7\001\002\000\006\014\ufff3\105\ufff3\001\002" +
    "\000\006\014\ufff4\105\ufff4\001\002\000\004\105\043\001" +
    "\002\000\006\014\uffef\105\uffef\001\002\000\006\014\ufff1" +
    "\105\ufff1\001\002\000\006\014\ufff0\105\ufff0\001\002\000" +
    "\006\014\ufff2\105\ufff2\001\002\000\004\010\044\001\002" +
    "\000\004\011\045\001\002\000\004\012\046\001\002\000" +
    "\030\032\056\037\035\040\034\042\042\043\040\044\041" +
    "\045\037\051\051\100\061\101\060\105\055\001\002\000" +
    "\034\013\uffe3\032\uffe3\037\uffe3\040\uffe3\042\uffe3\043\uffe3" +
    "\044\uffe3\045\uffe3\051\uffe3\074\uffe3\100\uffe3\101\uffe3\105" +
    "\uffe3\001\002\000\034\013\uffec\032\056\037\035\040\034" +
    "\042\042\043\040\044\041\045\037\051\051\074\uffec\100" +
    "\061\101\060\105\055\001\002\000\004\010\172\001\002" +
    "\000\034\013\uffe7\032\uffe7\037\uffe7\040\uffe7\042\uffe7\043" +
    "\uffe7\044\uffe7\045\uffe7\051\uffe7\074\uffe7\100\uffe7\101\uffe7" +
    "\105\uffe7\001\002\000\034\013\uffea\032\uffea\037\uffea\040" +
    "\uffea\042\uffea\043\uffea\044\uffea\045\uffea\051\uffea\074\uffea" +
    "\100\uffea\101\uffea\105\uffea\001\002\000\006\013\166\074" +
    "\165\001\002\000\004\017\162\001\002\000\004\010\126" +
    "\001\002\000\034\013\uffe4\032\uffe4\037\uffe4\040\uffe4\042" +
    "\uffe4\043\uffe4\044\uffe4\045\uffe4\051\uffe4\074\uffe4\100\uffe4" +
    "\101\uffe4\105\uffe4\001\002\000\004\012\123\001\002\000" +
    "\004\010\113\001\002\000\034\013\uffe6\032\uffe6\037\uffe6" +
    "\040\uffe6\042\uffe6\043\uffe6\044\uffe6\045\uffe6\051\uffe6\074" +
    "\uffe6\100\uffe6\101\uffe6\105\uffe6\001\002\000\034\013\uffe9" +
    "\032\uffe9\037\uffe9\040\uffe9\042\uffe9\043\uffe9\044\uffe9\045" +
    "\uffe9\051\uffe9\074\uffe9\100\uffe9\101\uffe9\105\uffe9\001\002" +
    "\000\006\014\070\105\067\001\002\000\034\013\uffe8\032" +
    "\uffe8\037\uffe8\040\uffe8\042\uffe8\043\uffe8\044\uffe8\045\uffe8" +
    "\051\uffe8\074\uffe8\100\uffe8\101\uffe8\105\uffe8\001\002\000" +
    "\034\013\uffe5\032\uffe5\037\uffe5\040\uffe5\042\uffe5\043\uffe5" +
    "\044\uffe5\045\uffe5\051\uffe5\074\uffe5\100\uffe5\101\uffe5\105" +
    "\uffe5\001\002\000\004\004\106\001\002\000\004\015\071" +
    "\001\002\000\004\105\072\001\002\000\004\004\073\001" +
    "\002\000\004\012\074\001\002\000\004\016\076\001\002" +
    "\000\004\013\104\001\002\000\004\105\102\001\002\000" +
    "\006\006\100\013\uffdf\001\002\000\004\016\076\001\002" +
    "\000\004\013\uffde\001\002\000\004\016\103\001\002\000" +
    "\006\006\uffdd\013\uffdd\001\002\000\004\005\105\001\002" +
    "\000\036\005\uffe0\013\uffe0\032\uffe0\037\uffe0\040\uffe0\042" +
    "\uffe0\043\uffe0\044\uffe0\045\uffe0\051\uffe0\074\uffe0\100\uffe0" +
    "\101\uffe0\105\uffe0\001\002\000\006\105\107\106\110\001" +
    "\002\000\006\005\uffdc\011\uffdc\001\002\000\006\005\uffdb" +
    "\011\uffdb\001\002\000\004\005\112\001\002\000\036\005" +
    "\uffe1\013\uffe1\032\uffe1\037\uffe1\040\uffe1\042\uffe1\043\uffe1" +
    "\044\uffe1\045\uffe1\051\uffe1\074\uffe1\100\uffe1\101\uffe1\105" +
    "\uffe1\001\002\000\004\105\114\001\002\000\004\065\115" +
    "\001\002\000\004\106\116\001\002\000\004\011\117\001" +
    "\002\000\004\012\120\001\002\000\030\032\056\037\035" +
    "\040\034\042\042\043\040\044\041\045\037\051\051\100" +
    "\061\101\060\105\055\001\002\000\004\013\122\001\002" +
    "\000\034\013\uffd7\032\uffd7\037\uffd7\040\uffd7\042\uffd7\043" +
    "\uffd7\044\uffd7\045\uffd7\051\uffd7\074\uffd7\100\uffd7\101\uffd7" +
    "\105\uffd7\001\002\000\030\032\056\037\035\040\034\042" +
    "\042\043\040\044\041\045\037\051\051\100\061\101\060" +
    "\105\055\001\002\000\004\013\125\001\002\000\034\013" +
    "\uffd6\032\uffd6\037\uffd6\040\uffd6\042\uffd6\043\uffd6\044\uffd6" +
    "\045\uffd6\051\uffd6\074\uffd6\100\uffd6\101\uffd6\105\uffd6\001" +
    "\002\000\020\037\035\040\034\042\042\043\040\044\041" +
    "\045\037\105\131\001\002\000\006\014\070\105\153\001" +
    "\002\000\004\005\140\001\002\000\004\065\132\001\002" +
    "\000\006\105\107\106\110\001\002\000\004\011\134\001" +
    "\002\000\004\012\135\001\002\000\030\032\056\037\035" +
    "\040\034\042\042\043\040\044\041\045\037\051\051\100" +
    "\061\101\060\105\055\001\002\000\004\013\137\001\002" +
    "\000\034\013\uffd5\032\uffd5\037\uffd5\040\uffd5\042\uffd5\043" +
    "\uffd5\044\uffd5\045\uffd5\051\uffd5\074\uffd5\100\uffd5\101\uffd5" +
    "\105\uffd5\001\002\000\004\105\141\001\002\000\004\065" +
    "\142\001\002\000\006\105\107\106\110\001\002\000\004" +
    "\005\144\001\002\000\004\105\145\001\002\000\004\017" +
    "\146\001\002\000\004\011\147\001\002\000\004\012\150" +
    "\001\002\000\030\032\056\037\035\040\034\042\042\043" +
    "\040\044\041\045\037\051\051\100\061\101\060\105\055" +
    "\001\002\000\004\013\152\001\002\000\034\013\uffd4\032" +
    "\uffd4\037\uffd4\040\uffd4\042\uffd4\043\uffd4\044\uffd4\045\uffd4" +
    "\051\uffd4\074\uffd4\100\uffd4\101\uffd4\105\uffd4\001\002\000" +
    "\006\004\106\062\154\001\002\000\004\105\155\001\002" +
    "\000\004\011\156\001\002\000\004\012\157\001\002\000" +
    "\030\032\056\037\035\040\034\042\042\043\040\044\041" +
    "\045\037\051\051\100\061\101\060\105\055\001\002\000" +
    "\004\013\161\001\002\000\034\013\uffd3\032\uffd3\037\uffd3" +
    "\040\uffd3\042\uffd3\043\uffd3\044\uffd3\045\uffd3\051\uffd3\074" +
    "\uffd3\100\uffd3\101\uffd3\105\uffd3\001\002\000\004\005\163" +
    "\001\002\000\034\013\uffe2\032\uffe2\037\uffe2\040\uffe2\042" +
    "\uffe2\043\uffe2\044\uffe2\045\uffe2\051\uffe2\074\uffe2\100\uffe2" +
    "\101\uffe2\105\uffe2\001\002\000\004\013\171\001\002\000" +
    "\006\105\107\106\110\001\002\000\004\005\uffed\001\002" +
    "\000\004\005\170\001\002\000\004\013\uffd2\001\002\000" +
    "\004\005\uffee\001\002\000\004\016\174\001\002\000\004" +
    "\011\200\001\002\000\006\016\176\105\175\001\002\000" +
    "\004\016\177\001\002\000\004\011\uffd9\001\002\000\004" +
    "\011\uffd8\001\002\000\004\005\201\001\002\000\034\013" +
    "\uffda\032\uffda\037\uffda\040\uffda\042\uffda\043\uffda\044\uffda" +
    "\045\uffda\051\uffda\074\uffda\100\uffda\101\uffda\105\uffda\001" +
    "\002\000\006\013\uffeb\074\uffeb\001\002\000\004\022\ufffa" +
    "\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\202\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\010\004\012\001\001\000\006\005\020\006\021\001" +
    "\001\000\002\001\001\000\006\004\014\034\013\001\001" +
    "\000\002\001\001\000\006\004\014\034\015\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\202\006\021\001\001\000\012\007" +
    "\027\010\026\012\025\013\024\001\001\000\004\011\035" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\007\032" +
    "\010\026\012\025\013\024\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\011\063\014\053\015\047\016\046\017\052\023" +
    "\062\025\064\026\051\027\061\030\065\031\056\001\001" +
    "\000\002\001\001\000\030\011\063\014\201\015\047\016" +
    "\046\017\052\023\062\025\064\026\051\027\061\030\065" +
    "\031\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\032\163\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\020\074\021\076\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\020\100\021\076\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\110\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\011\063\014\120\015\047\016\046" +
    "\017\052\023\062\025\064\026\051\027\061\030\065\031" +
    "\056\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\011\063\014\123\015\047\016\046\017\052\023\062\025" +
    "\064\026\051\027\061\030\065\031\056\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\011\126\017\127\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\132\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\011\063\014\135\015\047\016\046\017\052" +
    "\023\062\025\064\026\051\027\061\030\065\031\056\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\142\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\011\063\014\150\015\047\016" +
    "\046\017\052\023\062\025\064\026\051\027\061\030\065" +
    "\031\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\011\063\014\157\015\047\016\046\017" +
    "\052\023\062\025\064\026\051\027\061\030\065\031\056" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\166" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\172\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol cur_token) {
        report_error("Syntax error at line " + (cur_token.left+1) + 
                    ", column " + (cur_token.right+1) + 
                    ". Unexpected: " + cur_token.value + 
                    ". Expected: ", cur_token);
    }

    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Syntax error");
        if (info instanceof Symbol) {
            Symbol s = (Symbol) info;
            if (s.left >= 0 && s.right >= 0) {
                m.append(" in line ").append(s.left).append(", column ").append(s.right);
            }
            if (s.value != null) {
                m.append(", encountered: ").append(s.value);
            }
        }
        m.append(". ").append(message);
        System.err.println(m);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROGRAMA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROGRAMA ::= INICIO ID PUNTO_COMA LIBRERIAS BLOQUE_CODIGO FIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LIBRERIAS ::= LIBRERIA LIBRERIASS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIBRERIAS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LIBRERIASS ::= LIBRERIA LIBRERIASS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIBRERIASS",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LIBRERIASS ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIBRERIASS",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LIBRERIA ::= MODULARIDAD ID PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIBRERIA",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // BLOQUE_CODIGO ::= BLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_CODIGO",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // BLOQUE_CODIGO ::= BLOQUE BLOQUE_CODIGO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_CODIGO",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // BLOQUE ::= LLAVE_IZQ PROCEDIMIENTOS LLAVE_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // PROCEDIMIENTOS ::= PROCEDIMIENTO PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDIMIENTOS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // PROCEDIMIENTOS ::= PROCEDIMIENTO PUNTO_COMA PROCEDIMIENTOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDIMIENTOS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // PROCEDIMIENTO ::= FUNCION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDIMIENTO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // PROCEDIMIENTO ::= METODO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDIMIENTO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TIPO_DATO ::= DATOS_BOOLEANOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TIPO_DATO ::= DATOS_CARACTERES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TIPO_DATO ::= DATOS_DECIMALES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TIPO_DATO ::= DATOS_ENTEROS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TIPO_DATO ::= DATOS_NULOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TIPO_DATO ::= DATOS_TEXTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FUNCION ::= ACCESO TIPO_DATO ID PAR_IZQ PAR_DER LLAVE_IZQ INSTRUCCIONES RETORNAR LLAVE_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // METODO ::= ACCESO TIPO_DATO ID PAR_IZQ PAR_DER LLAVE_IZQ INSTRUCCIONES LLAVE_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("METODO",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INSTRUCCIONES ::= INSTRUCCION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INSTRUCCIONES ::= INSTRUCCION INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INSTRUCCION ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INSTRUCCION ::= ESCRITURA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // INSTRUCCION ::= REGLAIF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // INSTRUCCION ::= REGLAELSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // INSTRUCCION ::= REGLAWHILE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // INSTRUCCION ::= REGLAFOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // INSTRUCCION ::= REGLAFOREACH 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // INSTRUCCION ::= CONTADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CONTADOR ::= ID INC_DEC PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTADOR",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACION ::= TIPO_DATO ID IGUAL ID_NUM PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACION ::= TIPO_DATO CORCH_IZQ CORCH_DER ID IGUAL LLAVE_IZQ LISTA_ELEMENTOS LLAVE_DER PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LISTA_ELEMENTOS ::= ELEMENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_ELEMENTOS",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LISTA_ELEMENTOS ::= ELEMENTO COMA LISTA_ELEMENTOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_ELEMENTOS",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ELEMENTO ::= COMILLAS ID COMILLAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELEMENTO",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ID_NUM ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID_NUM",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ID_NUM ::= NUM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID_NUM",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ESCRITURA ::= ENTRADA_Y_SALIDA PAR_IZQ TEXTO_ESCRITURA PAR_DER PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESCRITURA",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TEXTO_ESCRITURA ::= COMILLAS COMILLAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TEXTO_ESCRITURA",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TEXTO_ESCRITURA ::= COMILLAS ID COMILLAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TEXTO_ESCRITURA",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // REGLAIF ::= SI PAR_IZQ ID OPERADORES_RELACIONALES NUM PAR_DER LLAVE_IZQ INSTRUCCIONES LLAVE_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("REGLAIF",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // REGLAELSE ::= SINO LLAVE_IZQ INSTRUCCIONES LLAVE_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("REGLAELSE",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // REGLAWHILE ::= CICLO PAR_IZQ ID OPERADORES_RELACIONALES ID_NUM PAR_DER LLAVE_IZQ INSTRUCCIONES LLAVE_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("REGLAWHILE",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // REGLAFOR ::= CICLO PAR_IZQ DECLARACION PUNTO_COMA ID OPERADORES_RELACIONALES ID_NUM PUNTO_COMA ID INC_DEC PAR_DER LLAVE_IZQ INSTRUCCIONES LLAVE_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("REGLAFOR",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // REGLAFOREACH ::= CICLO PAR_IZQ TIPO_DATO ID OPERADOR ID PAR_DER LLAVE_IZQ INSTRUCCIONES LLAVE_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("REGLAFOREACH",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // RETORNAR ::= RETORNO ID_NUM PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETORNAR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
