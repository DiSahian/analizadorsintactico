<<<<<<< HEAD
=======
<<<<<<< Updated upstream

//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package codigo;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\057\000\002\002\004\000\002\002\010\000\002\003" +
    "\003\000\002\003\004\000\002\004\005\000\002\005\003" +
    "\000\002\005\004\000\002\006\005\000\002\007\004\000" +
    "\002\007\005\000\002\010\003\000\002\010\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\012\013" +
    "\000\002\013\012\000\002\014\003\000\002\014\004\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\016\005\000\002\017\007" +
    "\000\002\017\013\000\002\020\003\000\002\020\005\000" +
    "\002\021\005\000\002\022\003\000\002\022\003\000\002" +
    "\023\007\000\002\024\004\000\002\024\005\000\002\025" +
    "\013\000\002\026\006\000\002\027\013\000\002\030\020" +
    "\000\002\031\014\000\002\032\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\200\000\004\021\004\001\002\000\004\105\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\005\010\001\002\000\004\061\012\001\002\000" +
    "\004\012\021\001\002\000\004\105\015\001\002\000\006" +
    "\012\uffff\061\012\001\002\000\004\012\ufffe\001\002\000" +
    "\004\005\016\001\002\000\006\012\ufffd\061\ufffd\001\002" +
    "\000\004\022\202\001\002\000\006\012\021\022\ufffc\001" +
    "\002\000\004\024\022\001\002\000\016\037\032\040\033" +
    "\042\037\043\035\044\040\045\034\001\002\000\004\005" +
    "\ufff6\001\002\000\004\005\ufff7\001\002\000\004\005\030" +
    "\001\002\000\004\013\027\001\002\000\006\012\ufffa\022" +
    "\ufffa\001\002\000\006\013\ufff9\024\022\001\002\000\004" +
    "\013\ufff8\001\002\000\006\014\ufff5\105\ufff5\001\002\000" +
    "\006\014\ufff4\105\ufff4\001\002\000\006\014\ufff0\105\ufff0" +
    "\001\002\000\006\014\ufff2\105\ufff2\001\002\000\004\105" +
    "\041\001\002\000\006\014\ufff3\105\ufff3\001\002\000\006" +
    "\014\ufff1\105\ufff1\001\002\000\004\010\042\001\002\000" +
    "\004\011\043\001\002\000\004\012\044\001\002\000\030" +
    "\032\054\037\032\040\033\042\037\043\035\044\040\045" +
    "\034\051\047\100\057\101\056\105\053\001\002\000\034" +
    "\013\uffe4\032\uffe4\037\uffe4\040\uffe4\042\uffe4\043\uffe4\044" +
    "\uffe4\045\uffe4\051\uffe4\074\uffe4\100\uffe4\101\uffe4\105\uffe4" +
    "\001\002\000\034\013\uffed\032\054\037\032\040\033\042" +
    "\037\043\035\044\040\045\034\051\047\074\uffed\100\057" +
    "\101\056\105\053\001\002\000\004\010\170\001\002\000" +
    "\034\013\uffe8\032\uffe8\037\uffe8\040\uffe8\042\uffe8\043\uffe8" +
    "\044\uffe8\045\uffe8\051\uffe8\074\uffe8\100\uffe8\101\uffe8\105" +
    "\uffe8\001\002\000\034\013\uffeb\032\uffeb\037\uffeb\040\uffeb" +
    "\042\uffeb\043\uffeb\044\uffeb\045\uffeb\051\uffeb\074\uffeb\100" +
    "\uffeb\101\uffeb\105\uffeb\001\002\000\006\013\164\074\163" +
    "\001\002\000\004\017\160\001\002\000\004\010\124\001" +
    "\002\000\034\013\uffe5\032\uffe5\037\uffe5\040\uffe5\042\uffe5" +
    "\043\uffe5\044\uffe5\045\uffe5\051\uffe5\074\uffe5\100\uffe5\101" +
    "\uffe5\105\uffe5\001\002\000\004\012\121\001\002\000\004" +
    "\010\111\001\002\000\034\013\uffe7\032\uffe7\037\uffe7\040" +
    "\uffe7\042\uffe7\043\uffe7\044\uffe7\045\uffe7\051\uffe7\074\uffe7" +
    "\100\uffe7\101\uffe7\105\uffe7\001\002\000\034\013\uffea\032" +
    "\uffea\037\uffea\040\uffea\042\uffea\043\uffea\044\uffea\045\uffea" +
    "\051\uffea\074\uffea\100\uffea\101\uffea\105\uffea\001\002\000" +
    "\006\014\066\105\065\001\002\000\034\013\uffe6\032\uffe6" +
    "\037\uffe6\040\uffe6\042\uffe6\043\uffe6\044\uffe6\045\uffe6\051" +
    "\uffe6\074\uffe6\100\uffe6\101\uffe6\105\uffe6\001\002\000\034" +
    "\013\uffe9\032\uffe9\037\uffe9\040\uffe9\042\uffe9\043\uffe9\044" +
    "\uffe9\045\uffe9\051\uffe9\074\uffe9\100\uffe9\101\uffe9\105\uffe9" +
    "\001\002\000\004\004\104\001\002\000\004\015\067\001" +
    "\002\000\004\105\070\001\002\000\004\004\071\001\002" +
    "\000\004\012\072\001\002\000\004\016\075\001\002\000" +
    "\004\013\102\001\002\000\006\006\100\013\uffe0\001\002" +
    "\000\004\105\076\001\002\000\004\016\077\001\002\000" +
    "\006\006\uffde\013\uffde\001\002\000\004\016\075\001\002" +
    "\000\004\013\uffdf\001\002\000\004\005\103\001\002\000" +
    "\036\005\uffe1\013\uffe1\032\uffe1\037\uffe1\040\uffe1\042\uffe1" +
    "\043\uffe1\044\uffe1\045\uffe1\051\uffe1\074\uffe1\100\uffe1\101" +
    "\uffe1\105\uffe1\001\002\000\006\105\105\106\106\001\002" +
    "\000\006\005\uffdd\011\uffdd\001\002\000\006\005\uffdc\011" +
    "\uffdc\001\002\000\004\005\110\001\002\000\036\005\uffe2" +
    "\013\uffe2\032\uffe2\037\uffe2\040\uffe2\042\uffe2\043\uffe2\044" +
    "\uffe2\045\uffe2\051\uffe2\074\uffe2\100\uffe2\101\uffe2\105\uffe2" +
    "\001\002\000\004\105\112\001\002\000\004\065\113\001" +
    "\002\000\004\106\114\001\002\000\004\011\115\001\002" +
    "\000\004\012\116\001\002\000\030\032\054\037\032\040" +
    "\033\042\037\043\035\044\040\045\034\051\047\100\057" +
    "\101\056\105\053\001\002\000\004\013\120\001\002\000" +
    "\034\013\uffd8\032\uffd8\037\uffd8\040\uffd8\042\uffd8\043\uffd8" +
    "\044\uffd8\045\uffd8\051\uffd8\074\uffd8\100\uffd8\101\uffd8\105" +
    "\uffd8\001\002\000\030\032\054\037\032\040\033\042\037" +
    "\043\035\044\040\045\034\051\047\100\057\101\056\105" +
    "\053\001\002\000\004\013\123\001\002\000\034\013\uffd7" +
    "\032\uffd7\037\uffd7\040\uffd7\042\uffd7\043\uffd7\044\uffd7\045" +
    "\uffd7\051\uffd7\074\uffd7\100\uffd7\101\uffd7\105\uffd7\001\002" +
    "\000\020\037\032\040\033\042\037\043\035\044\040\045" +
    "\034\105\127\001\002\000\006\014\066\105\151\001\002" +
    "\000\004\005\136\001\002\000\004\065\130\001\002\000" +
    "\006\105\105\106\106\001\002\000\004\011\132\001\002" +
    "\000\004\012\133\001\002\000\030\032\054\037\032\040" +
    "\033\042\037\043\035\044\040\045\034\051\047\100\057" +
    "\101\056\105\053\001\002\000\004\013\135\001\002\000" +
    "\034\013\uffd6\032\uffd6\037\uffd6\040\uffd6\042\uffd6\043\uffd6" +
    "\044\uffd6\045\uffd6\051\uffd6\074\uffd6\100\uffd6\101\uffd6\105" +
    "\uffd6\001\002\000\004\105\137\001\002\000\004\065\140" +
    "\001\002\000\006\105\105\106\106\001\002\000\004\005" +
    "\142\001\002\000\004\105\143\001\002\000\004\017\144" +
    "\001\002\000\004\011\145\001\002\000\004\012\146\001" +
    "\002\000\030\032\054\037\032\040\033\042\037\043\035" +
    "\044\040\045\034\051\047\100\057\101\056\105\053\001" +
    "\002\000\004\013\150\001\002\000\034\013\uffd5\032\uffd5" +
    "\037\uffd5\040\uffd5\042\uffd5\043\uffd5\044\uffd5\045\uffd5\051" +
    "\uffd5\074\uffd5\100\uffd5\101\uffd5\105\uffd5\001\002\000\006" +
    "\004\104\062\152\001\002\000\004\105\153\001\002\000" +
    "\004\011\154\001\002\000\004\012\155\001\002\000\030" +
    "\032\054\037\032\040\033\042\037\043\035\044\040\045" +
    "\034\051\047\100\057\101\056\105\053\001\002\000\004" +
    "\013\157\001\002\000\034\013\uffd4\032\uffd4\037\uffd4\040" +
    "\uffd4\042\uffd4\043\uffd4\044\uffd4\045\uffd4\051\uffd4\074\uffd4" +
    "\100\uffd4\101\uffd4\105\uffd4\001\002\000\004\005\161\001" +
    "\002\000\034\013\uffe3\032\uffe3\037\uffe3\040\uffe3\042\uffe3" +
    "\043\uffe3\044\uffe3\045\uffe3\051\uffe3\074\uffe3\100\uffe3\101" +
    "\uffe3\105\uffe3\001\002\000\004\013\167\001\002\000\006" +
    "\105\105\106\106\001\002\000\004\005\uffee\001\002\000" +
    "\004\005\166\001\002\000\004\013\uffd3\001\002\000\004" +
    "\005\uffef\001\002\000\004\016\172\001\002\000\004\011" +
    "\176\001\002\000\006\016\174\105\173\001\002\000\004" +
    "\016\175\001\002\000\004\011\uffda\001\002\000\004\011" +
    "\uffd9\001\002\000\004\005\177\001\002\000\034\013\uffdb" +
    "\032\uffdb\037\uffdb\040\uffdb\042\uffdb\043\uffdb\044\uffdb\045" +
    "\uffdb\051\uffdb\074\uffdb\100\uffdb\101\uffdb\105\uffdb\001\002" +
    "\000\006\013\uffec\074\uffec\001\002\000\004\022\ufffb\001" +
    "\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\200\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\010\004\012\001\001\000\006\005\016\006\017\001" +
    "\001\000\002\001\001\000\006\003\013\004\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\200\006\017\001\001\000\012" +
    "\007\025\010\024\012\023\013\022\001\001\000\004\011" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\007" +
    "\030\010\024\012\023\013\022\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\011\061\014\051\015\045\016\044\017\050" +
    "\023\060\025\063\026\047\027\057\030\062\031\054\001" +
    "\001\000\002\001\001\000\030\011\061\014\177\015\045" +
    "\016\044\017\050\023\060\025\063\026\047\027\057\030" +
    "\062\031\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\032\161\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\020\072\021\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\020\100\021\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\011\061\014\116\015\045\016" +
    "\044\017\050\023\060\025\063\026\047\027\057\030\062" +
    "\031\054\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\011\061\014\121\015\045\016\044\017\050\023\060" +
    "\025\063\026\047\027\057\030\062\031\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\011\124\017\125" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\130\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\011\061\014\133\015\045\016\044\017" +
    "\050\023\060\025\063\026\047\027\057\030\062\031\054" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\140\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\011\061\014\146\015\045" +
    "\016\044\017\050\023\060\025\063\026\047\027\057\030" +
    "\062\031\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\011\061\014\155\015\045\016\044" +
    "\017\050\023\060\025\063\026\047\027\057\030\062\031" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\164\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\024\170\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


=======
>>>>>>> master

//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package codigo;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\057\000\002\002\004\000\002\002\010\000\002\003" +
    "\003\000\002\003\004\000\002\004\005\000\002\005\003" +
    "\000\002\005\004\000\002\006\005\000\002\007\004\000" +
    "\002\007\005\000\002\010\003\000\002\010\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\012\013" +
    "\000\002\013\012\000\002\014\003\000\002\014\004\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\016\005\000\002\017\007" +
    "\000\002\017\013\000\002\020\003\000\002\020\005\000" +
    "\002\021\005\000\002\022\003\000\002\022\003\000\002" +
    "\023\007\000\002\024\004\000\002\024\005\000\002\025" +
    "\013\000\002\026\006\000\002\027\013\000\002\030\020" +
    "\000\002\031\014\000\002\032\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\200\000\004\021\004\001\002\000\004\105\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\005\010\001\002\000\004\061\012\001\002\000" +
    "\004\012\021\001\002\000\004\105\015\001\002\000\006" +
    "\012\uffff\061\012\001\002\000\004\012\ufffe\001\002\000" +
    "\004\005\016\001\002\000\006\012\ufffd\061\ufffd\001\002" +
    "\000\004\022\202\001\002\000\006\012\021\022\ufffc\001" +
    "\002\000\004\024\022\001\002\000\016\037\032\040\033" +
    "\042\037\043\035\044\040\045\034\001\002\000\004\005" +
    "\ufff6\001\002\000\004\005\ufff7\001\002\000\004\005\030" +
    "\001\002\000\004\013\027\001\002\000\006\012\ufffa\022" +
    "\ufffa\001\002\000\006\013\ufff9\024\022\001\002\000\004" +
    "\013\ufff8\001\002\000\006\014\ufff5\105\ufff5\001\002\000" +
    "\006\014\ufff4\105\ufff4\001\002\000\006\014\ufff0\105\ufff0" +
    "\001\002\000\006\014\ufff2\105\ufff2\001\002\000\004\105" +
    "\041\001\002\000\006\014\ufff3\105\ufff3\001\002\000\006" +
    "\014\ufff1\105\ufff1\001\002\000\004\010\042\001\002\000" +
    "\004\011\043\001\002\000\004\012\044\001\002\000\030" +
    "\032\054\037\032\040\033\042\037\043\035\044\040\045" +
    "\034\051\047\100\057\101\056\105\053\001\002\000\034" +
    "\013\uffe4\032\uffe4\037\uffe4\040\uffe4\042\uffe4\043\uffe4\044" +
    "\uffe4\045\uffe4\051\uffe4\074\uffe4\100\uffe4\101\uffe4\105\uffe4" +
    "\001\002\000\034\013\uffed\032\054\037\032\040\033\042" +
    "\037\043\035\044\040\045\034\051\047\074\uffed\100\057" +
    "\101\056\105\053\001\002\000\004\010\170\001\002\000" +
    "\034\013\uffe8\032\uffe8\037\uffe8\040\uffe8\042\uffe8\043\uffe8" +
    "\044\uffe8\045\uffe8\051\uffe8\074\uffe8\100\uffe8\101\uffe8\105" +
    "\uffe8\001\002\000\034\013\uffeb\032\uffeb\037\uffeb\040\uffeb" +
    "\042\uffeb\043\uffeb\044\uffeb\045\uffeb\051\uffeb\074\uffeb\100" +
    "\uffeb\101\uffeb\105\uffeb\001\002\000\006\013\164\074\163" +
    "\001\002\000\004\017\160\001\002\000\004\010\124\001" +
    "\002\000\034\013\uffe5\032\uffe5\037\uffe5\040\uffe5\042\uffe5" +
    "\043\uffe5\044\uffe5\045\uffe5\051\uffe5\074\uffe5\100\uffe5\101" +
    "\uffe5\105\uffe5\001\002\000\004\012\121\001\002\000\004" +
    "\010\111\001\002\000\034\013\uffe7\032\uffe7\037\uffe7\040" +
    "\uffe7\042\uffe7\043\uffe7\044\uffe7\045\uffe7\051\uffe7\074\uffe7" +
    "\100\uffe7\101\uffe7\105\uffe7\001\002\000\034\013\uffea\032" +
    "\uffea\037\uffea\040\uffea\042\uffea\043\uffea\044\uffea\045\uffea" +
    "\051\uffea\074\uffea\100\uffea\101\uffea\105\uffea\001\002\000" +
    "\006\014\066\105\065\001\002\000\034\013\uffe6\032\uffe6" +
    "\037\uffe6\040\uffe6\042\uffe6\043\uffe6\044\uffe6\045\uffe6\051" +
    "\uffe6\074\uffe6\100\uffe6\101\uffe6\105\uffe6\001\002\000\034" +
    "\013\uffe9\032\uffe9\037\uffe9\040\uffe9\042\uffe9\043\uffe9\044" +
    "\uffe9\045\uffe9\051\uffe9\074\uffe9\100\uffe9\101\uffe9\105\uffe9" +
    "\001\002\000\004\004\104\001\002\000\004\015\067\001" +
    "\002\000\004\105\070\001\002\000\004\004\071\001\002" +
    "\000\004\012\072\001\002\000\004\016\075\001\002\000" +
    "\004\013\102\001\002\000\006\006\100\013\uffe0\001\002" +
    "\000\004\105\076\001\002\000\004\016\077\001\002\000" +
    "\006\006\uffde\013\uffde\001\002\000\004\016\075\001\002" +
    "\000\004\013\uffdf\001\002\000\004\005\103\001\002\000" +
    "\036\005\uffe1\013\uffe1\032\uffe1\037\uffe1\040\uffe1\042\uffe1" +
    "\043\uffe1\044\uffe1\045\uffe1\051\uffe1\074\uffe1\100\uffe1\101" +
    "\uffe1\105\uffe1\001\002\000\006\105\105\106\106\001\002" +
    "\000\006\005\uffdd\011\uffdd\001\002\000\006\005\uffdc\011" +
    "\uffdc\001\002\000\004\005\110\001\002\000\036\005\uffe2" +
    "\013\uffe2\032\uffe2\037\uffe2\040\uffe2\042\uffe2\043\uffe2\044" +
    "\uffe2\045\uffe2\051\uffe2\074\uffe2\100\uffe2\101\uffe2\105\uffe2" +
    "\001\002\000\004\105\112\001\002\000\004\065\113\001" +
    "\002\000\004\106\114\001\002\000\004\011\115\001\002" +
    "\000\004\012\116\001\002\000\030\032\054\037\032\040" +
    "\033\042\037\043\035\044\040\045\034\051\047\100\057" +
    "\101\056\105\053\001\002\000\004\013\120\001\002\000" +
    "\034\013\uffd8\032\uffd8\037\uffd8\040\uffd8\042\uffd8\043\uffd8" +
    "\044\uffd8\045\uffd8\051\uffd8\074\uffd8\100\uffd8\101\uffd8\105" +
    "\uffd8\001\002\000\030\032\054\037\032\040\033\042\037" +
    "\043\035\044\040\045\034\051\047\100\057\101\056\105" +
    "\053\001\002\000\004\013\123\001\002\000\034\013\uffd7" +
    "\032\uffd7\037\uffd7\040\uffd7\042\uffd7\043\uffd7\044\uffd7\045" +
    "\uffd7\051\uffd7\074\uffd7\100\uffd7\101\uffd7\105\uffd7\001\002" +
    "\000\020\037\032\040\033\042\037\043\035\044\040\045" +
    "\034\105\127\001\002\000\006\014\066\105\151\001\002" +
    "\000\004\005\136\001\002\000\004\065\130\001\002\000" +
    "\006\105\105\106\106\001\002\000\004\011\132\001\002" +
    "\000\004\012\133\001\002\000\030\032\054\037\032\040" +
    "\033\042\037\043\035\044\040\045\034\051\047\100\057" +
    "\101\056\105\053\001\002\000\004\013\135\001\002\000" +
    "\034\013\uffd6\032\uffd6\037\uffd6\040\uffd6\042\uffd6\043\uffd6" +
    "\044\uffd6\045\uffd6\051\uffd6\074\uffd6\100\uffd6\101\uffd6\105" +
    "\uffd6\001\002\000\004\105\137\001\002\000\004\065\140" +
    "\001\002\000\006\105\105\106\106\001\002\000\004\005" +
    "\142\001\002\000\004\105\143\001\002\000\004\017\144" +
    "\001\002\000\004\011\145\001\002\000\004\012\146\001" +
    "\002\000\030\032\054\037\032\040\033\042\037\043\035" +
    "\044\040\045\034\051\047\100\057\101\056\105\053\001" +
    "\002\000\004\013\150\001\002\000\034\013\uffd5\032\uffd5" +
    "\037\uffd5\040\uffd5\042\uffd5\043\uffd5\044\uffd5\045\uffd5\051" +
    "\uffd5\074\uffd5\100\uffd5\101\uffd5\105\uffd5\001\002\000\006" +
    "\004\104\062\152\001\002\000\004\105\153\001\002\000" +
    "\004\011\154\001\002\000\004\012\155\001\002\000\030" +
    "\032\054\037\032\040\033\042\037\043\035\044\040\045" +
    "\034\051\047\100\057\101\056\105\053\001\002\000\004" +
    "\013\157\001\002\000\034\013\uffd4\032\uffd4\037\uffd4\040" +
    "\uffd4\042\uffd4\043\uffd4\044\uffd4\045\uffd4\051\uffd4\074\uffd4" +
    "\100\uffd4\101\uffd4\105\uffd4\001\002\000\004\005\161\001" +
    "\002\000\034\013\uffe3\032\uffe3\037\uffe3\040\uffe3\042\uffe3" +
    "\043\uffe3\044\uffe3\045\uffe3\051\uffe3\074\uffe3\100\uffe3\101" +
    "\uffe3\105\uffe3\001\002\000\004\013\167\001\002\000\006" +
    "\105\105\106\106\001\002\000\004\005\uffee\001\002\000" +
    "\004\005\166\001\002\000\004\013\uffd3\001\002\000\004" +
    "\005\uffef\001\002\000\004\016\172\001\002\000\004\011" +
    "\176\001\002\000\006\016\174\105\173\001\002\000\004" +
    "\016\175\001\002\000\004\011\uffda\001\002\000\004\011" +
    "\uffd9\001\002\000\004\005\177\001\002\000\034\013\uffdb" +
    "\032\uffdb\037\uffdb\040\uffdb\042\uffdb\043\uffdb\044\uffdb\045" +
    "\uffdb\051\uffdb\074\uffdb\100\uffdb\101\uffdb\105\uffdb\001\002" +
    "\000\006\013\uffec\074\uffec\001\002\000\004\022\ufffb\001" +
    "\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\200\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\010\004\012\001\001\000\006\005\016\006\017\001" +
    "\001\000\002\001\001\000\006\003\013\004\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\200\006\017\001\001\000\012" +
    "\007\025\010\024\012\023\013\022\001\001\000\004\011" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\007" +
    "\030\010\024\012\023\013\022\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\011\061\014\051\015\045\016\044\017\050" +
    "\023\060\025\063\026\047\027\057\030\062\031\054\001" +
    "\001\000\002\001\001\000\030\011\061\014\177\015\045" +
    "\016\044\017\050\023\060\025\063\026\047\027\057\030" +
    "\062\031\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\032\161\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\020\072\021\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\020\100\021\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\011\061\014\116\015\045\016" +
    "\044\017\050\023\060\025\063\026\047\027\057\030\062" +
    "\031\054\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\011\061\014\121\015\045\016\044\017\050\023\060" +
    "\025\063\026\047\027\057\030\062\031\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\011\124\017\125" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\130\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\011\061\014\133\015\045\016\044\017" +
    "\050\023\060\025\063\026\047\027\057\030\062\031\054" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\140\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\011\061\014\146\015\045" +
    "\016\044\017\050\023\060\025\063\026\047\027\057\030" +
    "\062\031\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\011\061\014\155\015\045\016\044" +
    "\017\050\023\060\025\063\026\047\027\057\030\062\031" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\164\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\024\170\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


<<<<<<< HEAD
=======
>>>>>>> Stashed changes
>>>>>>> master

    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;}
<<<<<<< HEAD
=======
<<<<<<< Updated upstream


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action_part00000000(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROGRAMA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROGRAMA ::= INICIO ID PUNTO_COMA LIBRERIAS BLOQUE_CODIGO FIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LIBRERIAS ::= LIBRERIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LIBRERIAS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LIBRERIAS ::= LIBRERIA LIBRERIAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LIBRERIAS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LIBRERIA ::= MODULARIDAD ID PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LIBRERIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BLOQUE_CODIGO ::= BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE_CODIGO",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // BLOQUE_CODIGO ::= BLOQUE BLOQUE_CODIGO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE_CODIGO",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // BLOQUE ::= LLAVE_IZQ PROCEDIMIENTOS LLAVE_DER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // PROCEDIMIENTOS ::= PROCEDIMIENTO PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROCEDIMIENTOS",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // PROCEDIMIENTOS ::= PROCEDIMIENTO PUNTO_COMA PROCEDIMIENTOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROCEDIMIENTOS",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // PROCEDIMIENTO ::= FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROCEDIMIENTO",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // PROCEDIMIENTO ::= METODO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROCEDIMIENTO",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TIPO_DATO ::= DATOS_BOOLEANOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TIPO_DATO ::= DATOS_CARACTERES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TIPO_DATO ::= DATOS_DECIMALES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TIPO_DATO ::= DATOS_ENTEROS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TIPO_DATO ::= DATOS_NULOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TIPO_DATO ::= DATOS_TEXTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FUNCION ::= ACCESO TIPO_DATO ID PAR_IZQ PAR_DER LLAVE_IZQ INSTRUCCIONES RETORNAR LLAVE_DER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // METODO ::= ACCESO TIPO_DATO ID PAR_IZQ PAR_DER LLAVE_IZQ INSTRUCCIONES LLAVE_DER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INSTRUCCIONES ::= INSTRUCCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INSTRUCCIONES ::= INSTRUCCION INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INSTRUCCION ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INSTRUCCION ::= ESCRITURA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INSTRUCCION ::= REGLAIF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // INSTRUCCION ::= REGLAELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // INSTRUCCION ::= REGLAWHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // INSTRUCCION ::= REGLAFOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // INSTRUCCION ::= REGLAFOREACH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // INSTRUCCION ::= CONTADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CONTADOR ::= ID INC_DEC PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTADOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION ::= TIPO_DATO ID IGUAL ID_NUM PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACION ::= TIPO_DATO CORCH_IZQ CORCH_DER ID IGUAL LLAVE_IZQ LISTA_ELEMENTOS LLAVE_DER PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LISTA_ELEMENTOS ::= ELEMENTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_ELEMENTOS",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LISTA_ELEMENTOS ::= ELEMENTO COMA LISTA_ELEMENTOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_ELEMENTOS",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ELEMENTO ::= COMILLAS ID COMILLAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTO",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ID_NUM ::= ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ID_NUM",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ID_NUM ::= NUM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ID_NUM",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ESCRITURA ::= ENTRADA_Y_SALIDA PAR_IZQ TEXTO_ESCRITURA PAR_DER PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESCRITURA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TEXTO_ESCRITURA ::= COMILLAS COMILLAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TEXTO_ESCRITURA",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TEXTO_ESCRITURA ::= COMILLAS ID COMILLAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TEXTO_ESCRITURA",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // REGLAIF ::= SI PAR_IZQ ID OPERADORES_RELACIONALES NUM PAR_DER LLAVE_IZQ INSTRUCCIONES LLAVE_DER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("REGLAIF",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // REGLAELSE ::= SINO LLAVE_IZQ INSTRUCCIONES LLAVE_DER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("REGLAELSE",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // REGLAWHILE ::= CICLO PAR_IZQ ID OPERADORES_RELACIONALES ID_NUM PAR_DER LLAVE_IZQ INSTRUCCIONES LLAVE_DER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("REGLAWHILE",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // REGLAFOR ::= CICLO PAR_IZQ DECLARACION PUNTO_COMA ID OPERADORES_RELACIONALES ID_NUM PUNTO_COMA ID INC_DEC PAR_DER LLAVE_IZQ INSTRUCCIONES LLAVE_DER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("REGLAFOR",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // REGLAFOREACH ::= CICLO PAR_IZQ TIPO_DATO ID OPERADOR ID PAR_DER LLAVE_IZQ INSTRUCCIONES LLAVE_DER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("REGLAFOREACH",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // RETORNAR ::= RETORNO ID_NUM PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETORNAR",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
              return CUP$Sintax$do_action_part00000000(
                               CUP$Sintax$act_num,
                               CUP$Sintax$parser,
                               CUP$Sintax$stack,
                               CUP$Sintax$top);
    }
}

}
=======
>>>>>>> master


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action_part00000000(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROGRAMA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROGRAMA ::= INICIO ID PUNTO_COMA LIBRERIAS BLOQUE_CODIGO FIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LIBRERIAS ::= LIBRERIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LIBRERIAS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LIBRERIAS ::= LIBRERIA LIBRERIAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LIBRERIAS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LIBRERIA ::= MODULARIDAD ID PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LIBRERIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BLOQUE_CODIGO ::= BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE_CODIGO",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // BLOQUE_CODIGO ::= BLOQUE BLOQUE_CODIGO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE_CODIGO",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // BLOQUE ::= LLAVE_IZQ PROCEDIMIENTOS LLAVE_DER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // PROCEDIMIENTOS ::= PROCEDIMIENTO PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROCEDIMIENTOS",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // PROCEDIMIENTOS ::= PROCEDIMIENTO PUNTO_COMA PROCEDIMIENTOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROCEDIMIENTOS",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // PROCEDIMIENTO ::= FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROCEDIMIENTO",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // PROCEDIMIENTO ::= METODO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROCEDIMIENTO",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TIPO_DATO ::= DATOS_BOOLEANOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TIPO_DATO ::= DATOS_CARACTERES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TIPO_DATO ::= DATOS_DECIMALES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TIPO_DATO ::= DATOS_ENTEROS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TIPO_DATO ::= DATOS_NULOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TIPO_DATO ::= DATOS_TEXTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FUNCION ::= ACCESO TIPO_DATO ID PAR_IZQ PAR_DER LLAVE_IZQ INSTRUCCIONES RETORNAR LLAVE_DER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // METODO ::= ACCESO TIPO_DATO ID PAR_IZQ PAR_DER LLAVE_IZQ INSTRUCCIONES LLAVE_DER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INSTRUCCIONES ::= INSTRUCCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INSTRUCCIONES ::= INSTRUCCION INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INSTRUCCION ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INSTRUCCION ::= ESCRITURA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INSTRUCCION ::= REGLAIF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // INSTRUCCION ::= REGLAELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // INSTRUCCION ::= REGLAWHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // INSTRUCCION ::= REGLAFOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // INSTRUCCION ::= REGLAFOREACH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // INSTRUCCION ::= CONTADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CONTADOR ::= ID INC_DEC PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTADOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION ::= TIPO_DATO ID IGUAL ID_NUM PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACION ::= TIPO_DATO CORCH_IZQ CORCH_DER ID IGUAL LLAVE_IZQ LISTA_ELEMENTOS LLAVE_DER PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LISTA_ELEMENTOS ::= ELEMENTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_ELEMENTOS",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LISTA_ELEMENTOS ::= ELEMENTO COMA LISTA_ELEMENTOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_ELEMENTOS",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ELEMENTO ::= COMILLAS ID COMILLAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTO",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ID_NUM ::= ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ID_NUM",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ID_NUM ::= NUM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ID_NUM",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ESCRITURA ::= ENTRADA_Y_SALIDA PAR_IZQ TEXTO_ESCRITURA PAR_DER PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESCRITURA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TEXTO_ESCRITURA ::= COMILLAS COMILLAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TEXTO_ESCRITURA",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TEXTO_ESCRITURA ::= COMILLAS ID COMILLAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TEXTO_ESCRITURA",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // REGLAIF ::= SI PAR_IZQ ID OPERADORES_RELACIONALES NUM PAR_DER LLAVE_IZQ INSTRUCCIONES LLAVE_DER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("REGLAIF",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // REGLAELSE ::= SINO LLAVE_IZQ INSTRUCCIONES LLAVE_DER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("REGLAELSE",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // REGLAWHILE ::= CICLO PAR_IZQ ID OPERADORES_RELACIONALES ID_NUM PAR_DER LLAVE_IZQ INSTRUCCIONES LLAVE_DER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("REGLAWHILE",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // REGLAFOR ::= CICLO PAR_IZQ DECLARACION PUNTO_COMA ID OPERADORES_RELACIONALES ID_NUM PUNTO_COMA ID INC_DEC PAR_DER LLAVE_IZQ INSTRUCCIONES LLAVE_DER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("REGLAFOR",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // REGLAFOREACH ::= CICLO PAR_IZQ TIPO_DATO ID OPERADOR ID PAR_DER LLAVE_IZQ INSTRUCCIONES LLAVE_DER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("REGLAFOREACH",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // RETORNAR ::= RETORNO ID_NUM PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETORNAR",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
              return CUP$Sintax$do_action_part00000000(
                               CUP$Sintax$act_num,
                               CUP$Sintax$parser,
                               CUP$Sintax$stack,
                               CUP$Sintax$top);
    }
}

}
<<<<<<< HEAD
=======
>>>>>>> Stashed changes
>>>>>>> master
