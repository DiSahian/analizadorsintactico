package codigo;

import java_cup.runtime.*;

parser code
{:
    public void syntax_error(Symbol cur_token) {
        report_error("Syntax error at line " + (cur_token.left+1) + 
                    ", column " + (cur_token.right+1) + 
                    ". Unexpected: " + cur_token.value + 
                    ". Expected: ", cur_token);
    }

    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Syntax error");
        if (info instanceof Symbol) {
            Symbol s = (Symbol) info;
            if (s.left >= 0 && s.right >= 0) {
                m.append(" in line ").append(s.left).append(", column ").append(s.right);
            }
            if (s.value != null) {
                m.append(", encountered: ").append(s.value);
            }
        }
        m.append(". ").append(message);
        System.err.println(m);
    }

:};

terminal IGUAL,
    PUNTO_COMA,
    COMA,
    DOS_PUNTOS,
    PAR_IZQ,
    PAR_DER,
    LLAVE_IZQ,
    LLAVE_DER,
    CORCH_IZQ,
    CORCH_DER,
    COMILLAS,
    INC_DEC,
    SALTAR,
    INICIO,
    FIN,
    ERROR,
    ACCESO,
    ALIAS,
    ALTO,
    ARGUMENTO, 
    ARREGLOS, 
    BLOCKCHAIN, 
    CICLO,
    CONCURRENCIA,
    CONJUNTOS, 
    CONTEXTO, 
    CONTROL_FLOW,
    DATOS_BOOLEANOS, 
    DATOS_CARACTERES, 
    DATOS_COBOL, 
    DATOS_DECIMALES,
    DATOS_ENTEROS, 
    DATOS_NULOS, 
    DATOS_TEXTO,
    DEBUG, 
    DECLARAR, 
    DICCIONARIOS, 
    ENTRADA_Y_SALIDA, 
    ESTRUCTURAS, 
    EXCEPCIONES,
    GENERICOS, 
    HARDWARE,
    HERENCIA,
    INTERFACES_GRAFICAS,
    MANEJO_DE_MEMORIA,
    MODULARIDAD,
    OPERADOR,
    OPERADORES_ARITMETICOS,
    OPERADORES_LOGICOS,
    OPERADORES_RELACIONALES,
    PATRONES_DE_DISENO,
    PERSISTENCIA,
    PRECISION,
    REDES,
    REFERENCIA,
    REFLEXION,
    RETORNO,
    SALTO,
    SEGURIDAD,
    SERIALIZACION,
    SI,
    SINO,
    SWITCH,
    TESTING,
    TIEMPO,
    ID,
    NUM;

//Noterminales
non terminal PROGRAMA, LIBRERIAS, LIBRERIA, 
BLOQUE_CODIGO, BLOQUE, PROCEDIMIENTOS, 
PROCEDIMIENTO, TIPO_DATO, FUNCION, METODO, 
INSTRUCCIONES, INSTRUCCION, CONTADOR, 
DECLARACION, LISTA_ELEMENTOS, ELEMENTO, 
ID_NUM, ESCRITURA, TEXTO_ESCRITURA, REGLAIF, 
REGLAELSE, REGLAWHILE, REGLAFOR, 
<<<<<<< Updated upstream
REGLAFOREACH, RETORNAR, LIBRERIA_LISTA;
=======
REGLAFOREACH, RETORNAR, LIBRERIA_LISTA, LIBRERIASS;
>>>>>>> Stashed changes

start with PROGRAMA;

PROGRAMA ::= INICIO ID PUNTO_COMA LIBRERIAS BLOQUE_CODIGO FIN;

<<<<<<< Updated upstream
LIBRERIAS ::= LIBRERIA
| LIBRERIA LIBRERIAS;
=======
LIBRERIAS ::= LIBRERIA LIBRERIASS;

LIBRERIASS ::= LIBRERIA LIBRERIASS | /* empty */;
>>>>>>> Stashed changes

LIBRERIA ::= MODULARIDAD ID PUNTO_COMA;

BLOQUE_CODIGO ::= BLOQUE
| BLOQUE BLOQUE_CODIGO ;

BLOQUE ::= LLAVE_IZQ PROCEDIMIENTOS LLAVE_DER; 

PROCEDIMIENTOS ::= PROCEDIMIENTO PUNTO_COMA
| PROCEDIMIENTO PUNTO_COMA PROCEDIMIENTOS;

PROCEDIMIENTO ::= FUNCION
| METODO;

TIPO_DATO ::= DATOS_BOOLEANOS
| DATOS_CARACTERES
| DATOS_DECIMALES
| DATOS_ENTEROS
| DATOS_NULOS
| DATOS_TEXTO;

FUNCION ::= ACCESO TIPO_DATO ID PAR_IZQ PAR_DER LLAVE_IZQ INSTRUCCIONES RETORNAR LLAVE_DER;

METODO ::= ACCESO TIPO_DATO ID PAR_IZQ PAR_DER LLAVE_IZQ INSTRUCCIONES LLAVE_DER;

INSTRUCCIONES ::= INSTRUCCION
| INSTRUCCION INSTRUCCIONES; 

INSTRUCCION ::= DECLARACION
| ESCRITURA
| REGLAIF
| REGLAELSE
| REGLAWHILE
| REGLAFOR
| REGLAFOREACH
| CONTADOR;

CONTADOR ::= ID INC_DEC PUNTO_COMA;

DECLARACION ::= TIPO_DATO ID IGUAL ID_NUM PUNTO_COMA
| TIPO_DATO CORCH_IZQ CORCH_DER ID IGUAL LLAVE_IZQ LISTA_ELEMENTOS LLAVE_DER PUNTO_COMA;

LISTA_ELEMENTOS ::= ELEMENTO
| ELEMENTO COMA LISTA_ELEMENTOS;

ELEMENTO ::= COMILLAS ID COMILLAS;


ID_NUM ::= ID
| NUM; 

ESCRITURA ::= ENTRADA_Y_SALIDA PAR_IZQ TEXTO_ESCRITURA PAR_DER PUNTO_COMA;

TEXTO_ESCRITURA ::= COMILLAS COMILLAS
                  | COMILLAS ID COMILLAS;


REGLAIF ::= SI PAR_IZQ ID OPERADORES_RELACIONALES NUM PAR_DER LLAVE_IZQ INSTRUCCIONES LLAVE_DER;

REGLAELSE ::= SINO LLAVE_IZQ INSTRUCCIONES LLAVE_DER;

REGLAWHILE ::= CICLO PAR_IZQ ID OPERADORES_RELACIONALES ID_NUM PAR_DER LLAVE_IZQ INSTRUCCIONES LLAVE_DER;


REGLAFOR ::= CICLO PAR_IZQ DECLARACION PUNTO_COMA ID OPERADORES_RELACIONALES ID_NUM PUNTO_COMA ID INC_DEC PAR_DER LLAVE_IZQ INSTRUCCIONES LLAVE_DER;


REGLAFOREACH ::= CICLO PAR_IZQ TIPO_DATO ID OPERADOR ID PAR_DER LLAVE_IZQ INSTRUCCIONES LLAVE_DER;

<<<<<<< Updated upstream
RETORNAR ::= RETORNO ID_NUM PUNTO_COMA;
=======
RETORNAR ::= RETORNO ID_NUM PUNTO_COMA;
>>>>>>> Stashed changes
